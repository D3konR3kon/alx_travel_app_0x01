# Generated by Django 5.2.1 on 2025-06-14 23:06

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Property title', max_length=200)),
                ('description', models.TextField(help_text='Detailed property description')),
                ('location', models.CharField(help_text='Property location', max_length=200)),
                ('property_type', models.CharField(choices=[('apartment', 'Apartment'), ('house', 'House'), ('villa', 'Villa'), ('cabin', 'Cabin'), ('condo', 'Condominium'), ('other', 'Other')], default='apartment', help_text='Type of property', max_length=20)),
                ('price_per_night', models.DecimalField(decimal_places=2, help_text='Price per night in local currency', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('max_guests', models.PositiveIntegerField(help_text='Maximum number of guests allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('number_of_bedrooms', models.PositiveIntegerField(default=1, help_text='Number of bedrooms', validators=[django.core.validators.MinValueValidator(1)])),
                ('number_of_bathrooms', models.PositiveIntegerField(default=1, help_text='Number of bathrooms', validators=[django.core.validators.MinValueValidator(1)])),
                ('amenities', models.TextField(blank=True, help_text='Comma-separated list of amenities')),
                ('house_rules', models.TextField(blank=True, help_text='Property rules and guidelines')),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate', null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate', null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('availability', models.BooleanField(default=True, help_text='Is listing available for booking?')),
                ('instant_book', models.BooleanField(default=False, help_text='Allow instant booking?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('host', models.ForeignKey(blank=True, help_text='Property host/owner', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guest_email', models.EmailField(help_text='Guest contact email', max_length=254)),
                ('guest_phone', models.CharField(blank=True, help_text='Guest contact phone', max_length=20)),
                ('check_in_date', models.DateField(help_text='Check-in date')),
                ('check_out_date', models.DateField(help_text='Check-out date')),
                ('number_of_guests', models.PositiveIntegerField(help_text='Number of guests', validators=[django.core.validators.MinValueValidator(1)])),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, help_text='Total booking cost (calculated automatically)', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', help_text='Booking status', max_length=20)),
                ('special_requests', models.TextField(blank=True, help_text='Special requests from guest')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('guest', models.ForeignKey(help_text='Guest who made the booking', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(help_text='The property being booked', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='listings.listing')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(help_text='Property image', upload_to='listings/')),
                ('caption', models.CharField(blank=True, help_text='Image caption', max_length=200)),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary image?')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='listings.listing')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(help_text='Review comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review', to='listings.booking')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='listings.listing')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['location'], name='listings_li_locatio_4bc07d_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['price_per_night'], name='listings_li_price_p_278f5d_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['property_type'], name='listings_li_propert_7a505c_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['availability'], name='listings_li_availab_605bdf_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['guest'], name='listings_bo_guest_i_626ae5_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['check_in_date', 'check_out_date'], name='listings_bo_check_i_f3ab5f_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='listings_bo_status_8650c6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('listing', 'reviewer')},
        ),
    ]
